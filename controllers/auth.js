const crypto = require('crypto');
const User = require('../models/User');
const ErrorResponse = require('../utils/errorResponse');
const sendEmail = require('../utils/sendEmail');

exports.register = async (req, res, next) => {

    // Required Fields to register
    const {username, email, password} = req.body;

    try {
        const user = await User.create({
            username,
            email,
            password
        });

        sendToken(user, 201, res);
    } catch (error) {
        next(error);
    }
};



exports.login = async (req, res, next) => {

    // Required Fields to login
    const {email, password} = req.body;

    if( !email || !password ) {
        return next( new ErrorResponse("Please provide an valid email and password",400));
    }

    try {
        const user = await User.findOne({ email }).select("+password");
        if(!user) {
            return next( new ErrorResponse("Invalid Credentials",401));
        }


        const isMatch = await user.matchPasswords(password);
        if(!isMatch) {
            return next( new ErrorResponse("Invalid Credentials",401));
        }

        sendToken(user, 200, res);

    } catch (error) {
        res.status(500).json({ success: false, error: error.message})
    }
};



exports.forgotpassword = async (req, res, next) => {

    // Required Fields to set password 
    const {email} = req.body;

    try {
        // It will find the user with email in the database
        const user = await User.findOne({ email });


        // If User not found, it will send error 
        if(!user) {
            return next(new ErrorResponse("Email could not be send", 404));
        }


        // It will get generated resetToken from getResetPasswordToken() from User Model
        const resetToken = user.getResetPasswordToken();

        // save it to the database
        await user.save();

        // To create resetUrl, the port should be where front end is running
        const resetUrl =`http://localhost:3000/passwordreset/${resetToken}`;

        // This is the message to the client to reset the password with reset password url
        const message =`<h1> You have requested a password reset</h1>
        <p>Please go to this link to reset your password</p>
        <a href="${resetUrl} clicktracking=off>${resetUrl}</a>`  // clicktracking property is to avoid link looking weird and awkward

        try {
            await sendEmail({
                to: user.email,
                subject: "password Reset Request",
                text: message
            });

            res.status(200).json({
                success: true, 
                data:"Email send"
            });
        } catch (error) {
            user.resetPasswordToken = undefined;
            user.resetPasswordExpire = undefined;

            await user.save();

            return next(new ErrorResponse("Email could not be sent",500));
        }

    } catch (error) {
        next(error);
    }
};



exports.resetpassword = async (req, res, next) => {

    // We are gonna reset the password Token which is already exist in DB to reset the password 
    const resetPasswordToken = crypto.createHash('sha256').update(req.params.resetToken).digest('hex');
    
    try {

        // It will find the user with password token from the DB, and reset the password token
        const user = await User.findOne({
            resetPasswordToken,
            resetPasswordExpire: { $gt: Date.now() }  // Password Expiry date should be greater than current date
        })

        // If user not found with password token, then it will send error like Invalid Reset Token
        if(!user) {
            return next(new ErrorResponse("Invalid Reset Token",400))
        }

        // If user found with password token, it will reset the password
        user.password = req.body.password;
        user.resetPasswordToken = undefined;
        user.resetPasswordExpire = undefined;

        // save it to the database
        await user.save();

        res.status(200).json({
            success: true,
            data: "Password reset Success"
        })
    } catch (error) {
        next(error);
    }
};



// to get secret token which is generated by JWT
const sendToken = (user, statusCode, res) => {
    const token = user.getSignedToken()
    res.status(statusCode).json({success: true,  token})
};